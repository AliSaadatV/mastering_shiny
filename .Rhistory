library(shiny)
server <- function(input, output, session){
}
shinyApp(ui, server)
ui <- fluidPage(
"Hello"
)
shinyApp(ui, server)
runApp('1_firtst_shiny_app')
shinyApp(ui, server)
ls("package:datasets")
runApp('1_firtst_shiny_app')
?get
get("volcano", "package:datasets")
runApp('1_firtst_shiny_app')
runApp('1_firtst_shiny_app')
runApp('1_firtst_shiny_app')
runApp('1_firtst_shiny_app')
runApp('1_firtst_shiny_app')
runApp('1_firtst_shiny_app')
runApp('1_firtst_shiny_app')
shiny::runApp('2_basic_ui')
runApp('2_basic_ui')
0.05/4
runApp('2_basic_ui')
runApp('2_basic_ui')
q <- readLines("~/Downloads/c2.cp.v2023.1.Hs.entrez.gmt.txt")
head(q)
q[1]
shiny::runApp('3_basic_reactivity')
runApp('3_basic_reactivity')
runApp('3_basic_reactivity')
shiny::runApp('4_case_study_ER_injuries')
runApp('4_case_study_ER_injuries')
dir.create("neiss")
### EDA
download <- function(name) {
url <- "https://github.com/hadley/mastering-shiny/raw/master/neiss/"
download.file(paste0(url, name), paste0("4_case_study_ER_injuries/neiss/", name), quiet = TRUE)
}
download("injuries.tsv.gz")
url <- "https://github.com/hadley/mastering-shiny/tree/main/neiss"
### EDA
download <- function(name) {
url <- "https://github.com/hadley/mastering-shiny/tree/main/neiss"
download.file(paste0(url, name), paste0("4_case_study_ER_injuries/neiss/", name), quiet = TRUE)
}
download("injuries.tsv.gz")
url
### EDA
download <- function(name) {
url <- "https://github.com/hadley/mastering-shiny/blob/main/neiss/"
download.file(paste0(url, name), paste0("4_case_study_ER_injuries/neiss/", name), quiet = TRUE)
}
download("injuries.tsv.gz")
download("population.tsv")
download("products.tsv")
rm(url)
injuries <- vroom::vroom("4_case_study_ER_injuries/neiss/injuries.tsv.gz")
View(injuries)
### EDA
download <- function(name) {
url <- "https://raw.githubusercontent.com/hadley/mastering-shiny/main/neiss/"
download.file(paste0(url, name), paste0("4_case_study_ER_injuries/neiss/", name), quiet = TRUE)
}
download("injuries.tsv.gz")
download("population.tsv")
download("products.tsv")
injuries <- vroom::vroom("4_case_study_ER_injuries/neiss/injuries.tsv.gz")
View(injuries)
products <- vroom::vroom("4_case_study_ER_injuries/neiss/products.tsv")
population <- vroom::vroom("4_case_study_ER_injuries/neiss/population.tsv")
View(products)
### UI
prod_codes <- setNames(products$prod_code, products$title)
head(prod_codes)
View(products)
?setNames
library(shiny)
library(tidyverse)
library(vroom)
View(products)
View(population)
View(injuries)
10/100
10/100*4
runApp('4_case_study_ER_injuries')
### UI
prod_codes <- setNames(products$prod_code, products$title)
ui <- fluidPage(
fluidRow(
column(6,
selectInput("code", "Product", choices = prod_codes)
)
),
fluidRow(
column(4, tableOutput("diag")),
column(4, tableOutput("body_part")),
column(4, tableOutput("location"))
),
fluidRow(
column(12, plotOutput("age_sex"))
)
)
### SERVER
server <- function(input, output, session) {
selected <- reactive(injuries %>% filter(prod_code==input$code))
output$diag <- renderTable(selected() %>% count(diag, wt=weight, sort=TRUE))
output$body_part <- renderTable(selected() %>% count(body_part, wt=weight, sort=TRUE))
output$location <- renderTable(selected() %>% count(location, wt=weight, sort=TRUE))
summary <- reactive({
selected() %>%
count(age, sex, wt=weights) %>%
left_join(population, by=c("age", "sex")) %>%
mutate(rate=n/population*1e4)
})
output$age_sex <- renderPlot({
summary() %>%
ggplot() +
geom_line(aes(age, rate, color=sex)) +
labs(y="Injuries per 10000 people")
})
}
shinyApp(ui, server)
### SERVER
server <- function(input, output, session) {
selected <- reactive(injuries %>% filter(prod_code==input$code))
output$diag <- renderTable(selected() %>% count(diag, wt=weight, sort=TRUE))
output$body_part <- renderTable(selected() %>% count(body_part, wt=weight, sort=TRUE))
output$location <- renderTable(selected() %>% count(location, wt=weight, sort=TRUE))
summary <- reactive({
selected() %>%
count(age, sex, wt=weights) %>%
left_join(population, by=c("age", "sex")) %>%
mutate(rate=n/population*1e4)
})
output$age_sex <- renderPlot({
summary() %>%
ggplot() +
geom_line(aes(age, rate, color=sex)) +
labs(y="Injuries per 10000 people")
}, res=96)
}
shinyApp(ui, server)
### SERVER
server <- function(input, output, session) {
selected <- reactive(injuries %>% filter(prod_code == input$code))
output$diag <- renderTable(
selected() %>% count(diag, wt = weight, sort = TRUE)
)
output$body_part <- renderTable(
selected() %>% count(body_part, wt = weight, sort = TRUE)
)
output$location <- renderTable(
selected() %>% count(location, wt = weight, sort = TRUE)
)
summary <- reactive({
selected() %>%
count(age, sex, wt = weight) %>%
left_join(population, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
})
output$age_sex <- renderPlot({
summary() %>%
ggplot(aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Estimated number of injuries")
}, res = 96)
}
shinyApp(ui, server)
### SERVER
server <- function(input, output, session) {
selected <- reactive(injuries %>% filter(prod_code==input$code))
output$diag <- renderTable(selected() %>% count(diag, wt=weight, sort=TRUE))
output$body_part <- renderTable(selected() %>% count(body_part, wt=weight, sort=TRUE))
output$location <- renderTable(selected() %>% count(location, wt=weight, sort=TRUE))
summary <- reactive({
selected() %>%
count(age, sex, wt=weights) %>%
left_join(population, by=c("age", "sex")) %>%
mutate(rate=n/population*1e4)
})
output$age_sex <- renderPlot({
summary() %>%
ggplot(aes(age, rate, color=sex)) +
geom_line() +
labs(y="Injuries per 10000 people")
}, res=96)
}
shinyApp(ui, server)
### SERVER
server <- function(input, output, session) {
selected <- reactive(injuries %>% filter(prod_code==input$code))
output$diag <- renderTable(selected() %>% count(diag, wt=weight, sort=TRUE))
output$body_part <- renderTable(selected() %>% count(body_part, wt=weight, sort=TRUE))
output$location <- renderTable(selected() %>% count(location, wt=weight, sort=TRUE))
summary <- reactive({
selected() %>%
count(age, sex, wt=weight) %>%
left_join(population, by=c("age", "sex")) %>%
mutate(rate=n/population*1e4)
})
output$age_sex <- renderPlot({
summary() %>%
ggplot(aes(age, rate, color=sex)) +
geom_line() +
labs(y="Injuries per 10000 people")
}, res=96)
}
shinyApp(ui, server)
### SERVER
count_top <- function(df, var, n = 5) {
df %>%
mutate({{ var }} := fct_lump(fct_infreq({{ var }}), n = n)) %>%
group_by({{ var }}) %>%
summarise(n = as.integer(sum(weight)))
}
server <- function(input, output, session) {
selected <- reactive(injuries %>% filter(prod_code==input$code))
output$diag <- renderTable(count_top(selected(), diag), width = "100%")
output$body_part <- renderTable(count_top(selected(), body_part), width = "100%")
output$location <- renderTable(count_top(selected(), location), width = "100%")
summary <- reactive({
selected() %>%
count(age, sex, wt=weight) %>%
left_join(population, by=c("age", "sex")) %>%
mutate(rate=n/population*1e4)
})
output$age_sex <- renderPlot({
summary() %>%
ggplot(aes(age, rate, color=sex)) +
geom_line() +
labs(y="Injuries per 10000 people")
}, res=96)
}
shinyApp(ui, server)
server <- function(input, output, session) {
selected <- reactive(injuries %>% filter(prod_code==input$code))
output$diag <- renderTable(count_top(selected(), diag), width = "100%")
output$body_part <- renderTable(count_top(selected(), body_part), width = "100%")
output$location <- renderTable(count_top(selected(), location), width = "100%")
summary <- reactive({
selected() %>%
count(age, sex, wt=weight) %>%
left_join(population, by=c("age", "sex")) %>%
mutate(rate=n/population*1e4)
})
output$age_sex <- renderPlot({
if (input$y == "count") {
summary() %>%
ggplot(aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Estimated number of injuries")
} else {
summary() %>%
ggplot(aes(age, rate, colour = sex)) +
geom_line(na.rm = TRUE) +
labs(y = "Injuries per 10,000 people")
}
}, res = 96)
}
shinyApp(ui, server)
ui <- fluidPage(
fluidRow(
column(8, selectInput("code", "Product", choices = prod_codes), width="100%"),
column(2, selectInput("y", "Y axis", choices = c("rate", "count")))
),
fluidRow(
column(4, tableOutput("diag")),
column(4, tableOutput("body_part")),
column(4, tableOutput("location"))
),
fluidRow( column(12, plotOutput("age_sex")))
)
ui <- fluidPage(
fluidRow(
column(8, selectInput("code", "Product", choices = prod_codes, width="100%")),
column(2, selectInput("y", "Y axis", choices = c("rate", "count")))
),
fluidRow(
column(4, tableOutput("diag")),
column(4, tableOutput("body_part")),
column(4, tableOutput("location"))
),
fluidRow( column(12, plotOutput("age_sex")))
)
### SERVER
count_top <- function(df, var, n = 5) {
df %>%
mutate({{ var }} := fct_lump(fct_infreq({{ var }}), n = n)) %>%
group_by({{ var }}) %>%
summarise(n = as.integer(sum(weight)))
}
server <- function(input, output, session) {
selected <- reactive(injuries %>% filter(prod_code==input$code))
output$diag <- renderTable(count_top(selected(), diag), width = "100%")
output$body_part <- renderTable(count_top(selected(), body_part), width = "100%")
output$location <- renderTable(count_top(selected(), location), width = "100%")
summary <- reactive({
selected() %>%
count(age, sex, wt=weight) %>%
left_join(population, by=c("age", "sex")) %>%
mutate(rate=n/population*1e4)
})
output$age_sex <- renderPlot({
if (input$y == "count") {
summary() %>%
ggplot(aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Estimated number of injuries")
} else {
summary() %>%
ggplot(aes(age, rate, colour = sex)) +
geom_line(na.rm = TRUE) +
labs(y = "Injuries per 10,000 people")
}
}, res = 96)
}
shinyApp(ui, server)
server <- function(input, output, session) {
selected <- reactive(injuries %>% filter(prod_code==input$code))
output$diag <- renderTable(count_top(selected(), diag), width = "100%")
output$body_part <- renderTable(count_top(selected(), body_part), width = "100%")
output$location <- renderTable(count_top(selected(), location), width = "100%")
summary <- reactive({
selected() %>%
count(age, sex, wt=weight) %>%
left_join(population, by=c("age", "sex")) %>%
mutate(rate=n/population*1e4)
})
output$age_sex <- renderPlot({
if (input$y == "count") {
summary() %>%
ggplot(aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Estimated number of injuries")
} else {
summary() %>%
ggplot(aes(age, rate, colour = sex)) +
geom_line(na.rm = TRUE) +
labs(y = "Injuries per 10,000 people")
}
}, res = 96)
output$narrative <- eventReactive(input$story,
{seleceted() %>% slice_sample(n=1) %>% pull(narrative)})
}
shinyApp(ui, server)
ui <- fluidPage(
fluidRow(
column(8, selectInput("code", "Product", choices = prod_codes, width="100%")),
column(2, selectInput("y", "Y axis", choices = c("rate", "count")))
),
fluidRow(
column(4, tableOutput("diag")),
column(4, tableOutput("body_part")),
column(4, tableOutput("location"))
),
fluidRow( column(12, plotOutput("age_sex"))),
fluidRow(
column(2, actionButton("story", "Tell me a story!")),
column(10, textOutput("narrative"))
)
)
server <- function(input, output, session) {
selected <- reactive(injuries %>% filter(prod_code==input$code))
output$diag <- renderTable(count_top(selected(), diag), width = "100%")
output$body_part <- renderTable(count_top(selected(), body_part), width = "100%")
output$location <- renderTable(count_top(selected(), location), width = "100%")
summary <- reactive({
selected() %>%
count(age, sex, wt=weight) %>%
left_join(population, by=c("age", "sex")) %>%
mutate(rate=n/population*1e4)
})
output$age_sex <- renderPlot({
if (input$y == "count") {
summary() %>%
ggplot(aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Estimated number of injuries")
} else {
summary() %>%
ggplot(aes(age, rate, colour = sex)) +
geom_line(na.rm = TRUE) +
labs(y = "Injuries per 10,000 people")
}
}, res = 96)
output$narrative <- eventReactive(input$story,
{seleceted() %>% slice_sample(n=1) %>% pull(narrative)})
}
shinyApp(ui, server)
server <- function(input, output, session) {
selected <- reactive(injuries %>% filter(prod_code==input$code))
output$diag <- renderTable(count_top(selected(), diag), width = "100%")
output$body_part <- renderTable(count_top(selected(), body_part), width = "100%")
output$location <- renderTable(count_top(selected(), location), width = "100%")
summary <- reactive({
selected() %>%
count(age, sex, wt=weight) %>%
left_join(population, by=c("age", "sex")) %>%
mutate(rate=n/population*1e4)
})
output$age_sex <- renderPlot({
if (input$y == "count") {
summary() %>%
ggplot(aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Estimated number of injuries")
} else {
summary() %>%
ggplot(aes(age, rate, colour = sex)) +
geom_line(na.rm = TRUE) +
labs(y = "Injuries per 10,000 people")
}
}, res = 96)
output$narrative <- eventReactive(input$story,
{selected() %>% slice_sample(n=1) %>% pull(narrative)})
}
shinyApp(ui, server)
shiny::runApp('5_workflow')
runApp('5_workflow')
library(glue)
runApp('5_workflow')
shiny::runApp('7_graphics')
runApp('7_graphics')
runApp('7_graphics')
shiny::runApp('8_user_feedback')
library(tidyverse)
q <- read_delim("~/Desktop/GTEx_Analysis_2017-06-05_v8_RNASeQCv1.1.9_gene_median_tpm.gct")
q <- read_delim("~/Desktop/GTEx_Analysis_2017-06-05_v8_RNASeQCv1.1.9_gene_median_tpm.gct", delim="\t")
View(q)
q <- read_delim("~/Desktop/GTEx_Analysis_2017-06-05_v8_RNASeQCv1.1.9_gene_median_tpm.gct", delim="\t", skip=2)
q <- q %>% filter(Liver>=0.1)
q %>% filter(Description=="IL18BP")
q %>% filter(Description=="IL10RA")
q <- q %>% dplyr::select(Name, Description)
write_delim(q, "~/Desktop/GTEXv8_liver_medianTPM10pct.txt")
